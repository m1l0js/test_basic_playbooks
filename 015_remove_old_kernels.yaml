---
- name: Manage kernels and verify cleanup
  hosts: all
  vars:
    ansible_ssh_extra_args: "-o KexAlgorithms=+diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1 -o HostKeyAlgorithms=+ssh-rsa -o MACs=hmac-sha1"
  gather_facts: true
  tasks:
    - name: List installed kernels on Debian/Ubuntu-based systems
      command: dpkg --list | grep linux-image
      register: kernel_list
      when: ansible_facts['os_family'] in ["Debian", "Ubuntu"]

    - name: List installed kernels on RedHat/Oracle-based systems
      command: rpm -q kernel
      register: kernel_list
      when: ansible_facts['os_family'] in ["RedHat", "OracleLinux"]

    - name: List installed kernels on FreeBSD systems
      command: ls /boot/kernel | grep kernel
      register: kernel_list
      when: ansible_facts['os_family'] == "FreeBSD"

    - name: Display kernel list
      debug:
        var: kernel_list.stdout_lines

    - name: Get current kernel version on Linux systems
      command: uname -r
      register: current_kernel
      when: ansible_facts['os_family'] in ["Debian", "RedHat", "Ubuntu", "OracleLinux"]

    - name: Get current kernel version on FreeBSD systems
      command: uname -K
      register: current_kernel
      when: ansible_facts['os_family'] == "FreeBSD"

    - name: Parse and filter kernels on Debian/Ubuntu-based systems
      set_fact:
        kernels_to_keep: >-
          {{
            ([current_kernel.stdout] + kernel_list.stdout_lines
            | map('extract', '(?<=linux-image-)[0-9]+\.[0-9]+\.[0-9]+-[0-9]+')
            | map('sort', true)
            | list)[-2:]  # Keep the current kernel and the most recent before it
          }}
      when: ansible_facts['os_family'] in ["Debian", "Ubuntu"]

    - name: Parse and filter kernels on RedHat/Oracle-based systems
      set_fact:
        kernels_to_keep: >-
          {{
            ([current_kernel.stdout] + kernel_list.stdout_lines
            | map('regex_search', '[0-9]+\.[0-9]+\.[0-9]+-[0-9]+')
            | map('sort', true)
            | list)[-2:]  # Keep the current kernel and the most recent before it
          }}
      when: ansible_facts['os_family'] in ["RedHat", "OracleLinux"]

    - name: Parse and filter kernels on FreeBSD systems
      set_fact:
        kernels_to_keep: >-
          {{
            ([current_kernel.stdout] + kernel_list.stdout_lines
            | map('regex_search', '[0-9]+')
            | map('sort', true)
            | list)[-2:]  # Keep the current kernel and the most recent before it
          }}
      when: ansible_facts['os_family'] == "FreeBSD"

    - name: Remove old kernels on Debian/Ubuntu-based systems
      apt:
        name: "{{ item }}"
        state: absent
      with_items: >-
        {{
          kernel_list.stdout_lines
          | map('extract', '(?<=linux-image-)[0-9]+\.[0-9]+\.[0-9]+-[0-9]+')
          | difference(kernels_to_keep)
        }}
      when: ansible_facts['os_family'] in ["Debian", "Ubuntu"]
      ignore_errors: yes

    - name: Remove old kernels on RedHat/Oracle-based systems
      yum:
        name: "{{ item }}"
        state: absent
      with_items: >-
        {{
          kernel_list.stdout_lines
          | map('regex_search', '[0-9]+\.[0-9]+\.[0-9]+-[0-9]+')
          | difference(kernels_to_keep)
        }}
      when: ansible_facts['os_family'] in ["RedHat", "OracleLinux"]
      ignore_errors: yes

    - name: Remove old kernels on FreeBSD systems
      command: rm -rf /boot/kernel.old.{{ item }}
      with_items: >-
        {{
          kernel_list.stdout_lines
          | map('regex_search', '[0-9]+')
          | difference(kernels_to_keep)
        }}
      when: ansible_facts['os_family'] == "FreeBSD"
      ignore_errors: yes

    - name: Verify the number of kernels remaining on Debian/Ubuntu-based systems
      command: dpkg --list | grep linux-image | wc -l
      register: kernel_count
      when: ansible_facts['os_family'] in ["Debian", "Ubuntu"]

    - name: Verify the number of kernels remaining on RedHat/Oracle-based systems
      command: rpm -q kernel | wc -l
      register: kernel_count
      when: ansible_facts['os_family'] in ["RedHat", "OracleLinux"]

    - name: Verify the number of kernels remaining on FreeBSD systems
      command: ls /boot/kernel | grep kernel | wc -l
      register: kernel_count
      when: ansible_facts['os_family'] == "FreeBSD"

    - name: Display the number of kernels remaining
      debug:
        msg: "Host {{ inventory_hostname }} has {{ kernel_count.stdout }} kernels remaining."

    - name: Validate that only 2 kernels remain
      fail:
        msg: "More than 2 kernels remain on host {{ inventory_hostname }}! Found {{ kernel_count.stdout }}."
      when: kernel_count.stdout | int > 2
